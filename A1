//comment: author's name, ID, and date.
//pre-processor directives:
#include "stdafx.h"
#include <iostream>
#include <windows.h>
#include <thread>
#include <mutex>
#include <vector>
#include <condition_variable>
#include <cstdlib>
#include <ctime>
#include <string>
#include <random>
#include <chrono>
#include <map>

using namespace std;
//global constants:
int const MAX_NUM_OF_THREADS = 6;
int const NUM_OF_SAMPLES = 50;
std::mt19937 gen(time(0));
std::mutex string_mu;
int count_t = 0, count_p = 0, count_c = 0;
//global variables:
//function prototypes: (as required)

class Sensor { //abstract base class that models a sensor
public:
	Sensor(string& type) //constructor
		: sensorType(type) {}
	//Declare a virtual method to be overridden by derived classes:
	virtual double getValue() = 0;
	//Declare non-virtual method:
	string getType() {
		//returns the type of Sensor that this is:
		return (sensorType);
	}
	//Declare any instance variable(s):
private:
	string sensorType;
}; //end abstract class Sensor

class TempSensor : public Sensor { //syntax declares a derived class
public:
	TempSensor(string& s) //constructor
		: Sensor(s) {}
	virtual double getValue() {
		std::uniform_int_distribution<> dis(10, 30);
		//return a random value of ambient temperature between 10 and 30
		return (dis(gen));
	} //end getValue
}; //end class TempSensor

class PressureSensor : public Sensor {
public:
	PressureSensor(string& s) //constructor
		: Sensor(s) {}
	virtual double getValue() {
		//return a random value of pressure between 95 and 105
		std::uniform_int_distribution<> dis(95, 105);
		return (dis(gen));
	} //end getValue
}; //end class PressureSensor
class CapacitiveSensor : public Sensor {
public:
	CapacitiveSensor(string& s) //constructor
		: Sensor(s) {}
	virtual double getValue() {
		//return a random value of capacitence between 1 and 5
		std::uniform_int_distribution<> dis(1, 5);
		return (dis(gen));
	} //end getValue
}; //end class CapacitiveSensor
class BC {
public:
	//constructor: initialises a vector of Sensor pointers that are
	//passed in by reference:
	BC(std::vector<Sensor*>& sensors)
		: theSensors(sensors) {}
	void requestBC() {
		BC_mu.lock();
		if (lock == true){
			
			cout << "BusController is locked, thread " << std::this_thread::get_id() << " is about to suspend.." << endl;
			BC_mu.unlock();
			while (lock == true);
		}

		lock = true;
		cout << "BusController is locked by thread " << std::this_thread::get_id() << endl;



	}
	double getSensorValue(int selector) {
		return (*theSensors[selector]).getValue();
	}
	string getSensorType(int selector) {
		return (*theSensors[selector]).getType();
	}
	void releaseBC() {
		lock = false;
		cout << "BusController unlocked by thread " << std::this_thread::get_id() << endl;
		BC_mu.unlock();
		
		
		

	}
private:
	bool lock = false; //'false' means that the BC is not locked
	std::vector<Sensor*>& theSensors; //reference to vector of Sensor pointers
	std::mutex BC_mu; //mutex
	std::condition_variable BC_cond;
	
}; //end class BC
//run function –executed by each thread:
void run(BC& theBC) {

	int rnd_num;
		for (int i = 0; i< NUM_OF_SAMPLES; i++) { // NUM_OF_SAMPLES = 50 (initially)
			// request use of the BC:
			

					theBC.requestBC();

					std::uniform_int_distribution<> dis(1, 3);
					rnd_num = dis(gen);
					// generate a random value between 0 and 2, and use it to
					// select a sensor and obtain a value and the sensor's type:
					
					cout << "	sample value from thread " << std::this_thread::get_id() << " from " << theBC.getSensorType(rnd_num - 1) << " = " << theBC.getSensorValue(rnd_num - 1) << endl;
					
					// increment counter for sensor chosen (to keep count of
						// how many times each was used)
						// release the BC:

					if (rnd_num == 1){
						count_t++;
					}
					else if (rnd_num == 2){
						count_p++;
					}
					else if (rnd_num == 3){
						count_c++;
					}
					theBC.releaseBC();

					
					
						// delay for random period between 0.001s – 0.01s:
					std::uniform_int_distribution<> dis2(1, 10);
					Sleep(dis2(gen));
				
		}
}
int main() {
	int pause;
	//declare a vector of Sensor pointers:
	std::vector<Sensor*> sensors;
	//initialise each sensor and insert into the vector:
	string s = "temperature sensor";
	sensors.push_back(new TempSensor(s)); //push_back is a vector method.
	s = "pressure sensor";
	sensors.push_back(new PressureSensor(s)); //push_back is a vector method.
	s = "capacative sensor";
	sensors.push_back(new CapacitiveSensor(s)); //push_back is a vector method.
		// Instantiate the BC:
	BC theBC(std::ref(sensors));
	
	
	//instantiate and start the threads:
	std::thread the_threads[MAX_NUM_OF_THREADS]; //array of threads
for (int i = 0; i < MAX_NUM_OF_THREADS; i++) {
	the_threads[i] = std::thread(run, std::ref(theBC));
		//launch the threads:
		//....
}
	//wait for the threads to finish:
for (int i = 0; i < MAX_NUM_OF_THREADS; ++i) {
	the_threads[i].join();
	}
	//....
		cout << "All threads terminated" << endl;
		cout << "\nTemperature Sensor Accessed " << count_t << " times. Pressure Sensor Accessed " << count_p << " times. Capactive Sensor Accessed " << count_c << " times." << endl;
	//print out the number of times each sensor was accessed:
	//....
		cin >> pause;
		return 0;

}
